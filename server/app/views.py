from django.shortcuts import get_object_or_404\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom .models import Job, JobApplication\nfrom .serializers import JobSerializer, JobApplicationSerializer\n\n@api_view(['POST'])\ndef create_job(request):\n    serializer = JobSerializer(data=request.data)\n    if serializer.is_valid():\n        job = serializer.save()\n        return Response(JobSerializer(job).data, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view(['GET'])\ndef list_jobs(request, employer_id):\n    jobs = Job.objects.filter(employer_id=employer_id)\n    serializer = JobSerializer(jobs, many=True)\n    return Response(serializer.data, status=status.HTTP_200_OK)\n\n@api_view(['GET'])\ndef fetch_filtered_jobs(request):\n    title = request.GET.get('title', None)\n    location = request.GET.get('location', None)\n    job_type = request.GET.get('type', None)\n    posted_date = request.GET.get('posted_date', None)\n\n    filters = {}\n    if title:\n        filters['title__icontains'] = title\n    if location:\n        filters['location__icontains'] = location\n    if job_type:\n        filters['job_type'] = job_type\n    if posted_date:\n        filters['created_at__date'] = posted_date\n\n    jobs = Job.objects.filter(**filters)\n    serializer = JobSerializer(jobs, many=True)\n    return Response(serializer.data, status=status.HTTP_200_OK)\n\n@api_view(['GET'])\ndef fetch_job_detail(request, job_id):\n    job = get_object_or_404(Job, id=job_id)\n    serializer = JobSerializer(job)\n    return Response(serializer.data, status=status.HTTP_200_OK)\n\n@api_view(['PUT'])\ndef update_job(request, job_id):\n    job = get_object_or_404(Job, id=job_id)\n    serializer = JobSerializer(job, data=request.data, partial=True)\n    if serializer.is_valid():\n        job = serializer.save()\n        return Response(JobSerializer(job).data, status=status.HTTP_200_OK)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view(['DELETE'])\ndef delete_job(request, job_id):\n    job = get_object_or_404(Job, id=job_id)\n    job.delete()\n    return Response(status=status.HTTP_204_NO_CONTENT)\n\n@api_view(['POST'])\ndef apply_for_job(request, job_id):\n    serializer = JobApplicationSerializer(data=request.data)\n    if serializer.is_valid():\n        job_application = serializer.save(job_id=job_id, seeker_id=request.data.get('seeker_id'))\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view(['GET'])\ndef track_applications(request, seeker_id):\n    applications = JobApplication.objects.filter(seeker_id=seeker_id)\n    serializer = JobApplicationSerializer(applications, many=True)\n    return Response(serializer.data, status=status.HTTP_200_OK)\n\n@api_view(['POST'])\ndef schedule_interview(request, application_id):\n    job_application = get_object_or_404(JobApplication, id=application_id)\n    interview_time = request.data.get('interview_time')\n    if not interview_time:\n        return Response({'error': 'Interview time is required.'}, status=status.HTTP_400_BAD_REQUEST)\n    job_application.status = 'interview'\n    job_application.save()\n    return Response({'message': 'Interview scheduled successfully.'}, status=status.HTTP_200_OK)