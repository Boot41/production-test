from rest_framework import status\nfrom rest_framework.test import APITestCase\nfrom .models import Job, JobApplication\n\nclass JobTests(APITestCase):\n    def setUp(self):\n        self.valid_job_payload = {\n            'employer_id': 1,\n            'title': 'Software Engineer',\n            'description': 'Develop and maintain software applications.',\n            'location': 'Remote'\n        }\n        self.job_response = self.client.post('/api/jobs', self.valid_job_payload, format='json')\n        self.job_id = self.job_response.data['id']\n        self.valid_application_payload = {\n            'seeker_id': 1\n        }\n        self.application_response = self.client.post(f'/api/jobs/{self.job_id}/apply', self.valid_application_payload, format='json')\n        self.application_id = self.application_response.data['id']\n\n    def test_create_job(self):\n        response = self.client.post('/api/jobs', self.valid_job_payload, format='json')\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(Job.objects.count(), 2)\n        self.assertEqual(Job.objects.get(id=response.data['id']).title, 'Software Engineer')\n\n    def test_apply_for_job(self):\n        valid_application_payload = {\n            'seeker_id': 1\n        }\n        response = self.client.post(f'/api/jobs/{self.job_id}/apply', valid_application_payload, format='json')\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(JobApplication.objects.count(), 1)\n\n    def test_track_applications(self):\n        valid_application_payload = {\n            'seeker_id': 1\n        }\n        self.client.post(f'/api/jobs/{self.job_id}/apply', valid_application_payload, format='json')\n        response = self.client.get('/api/job-seekers/1/applications')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data), 1)\n\n    def test_fetch_filtered_jobs(self):\n        response = self.client.get('/api/jobs/filter?title=Software')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data), 1)\n        self.assertEqual(response.data[0]['title'], 'Software Engineer')\n\n    def test_apply_for_job_invalid(self):\n        invalid_payload = {}\n        response = self.client.post(f'/api/jobs/{self.job_id}/apply', invalid_payload, format='json')\n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n\n    def test_list_jobs(self):\n        response = self.client.get('/api/employers/1/jobs')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data), 1)\n        self.assertEqual(response.data[0]['title'], 'Software Engineer')\n\n    def test_update_job(self):\n        updated_payload = {\n            'title': 'Senior Software Engineer'\n        }\n        response = self.client.put(f'/api/jobs/{self.job_id}', updated_payload, format='json')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(Job.objects.get(id=self.job_id).title, 'Senior Software Engineer')\n\n    def test_delete_job(self):\n        response = self.client.delete(f'/api/jobs/{self.job_id}')\n        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n        self.assertEqual(Job.objects.count(), 1)\n\n    def test_delete_job_not_found(self):\n        response = self.client.delete('/api/jobs/9999')\n        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)\n\n    def test_fetch_job_detail(self):\n        response = self.client.get(f'/api/jobs/{self.job_id}')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data['title'], 'Software Engineer')\n\n    def test_schedule_interview(self):\n        payload = {\n            'interview_time': '2023-10-15T10:00:00Z'\n        }\n        response = self.client.post(f'/api/applications/{self.application_id}/schedule-interview', payload, format='json')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(JobApplication.objects.get(id=self.application_id).status, 'interview')\n\n    def test_schedule_interview_no_time(self):\n        response = self.client.post(f'/api/applications/{self.application_id}/schedule-interview', {}, format='json')\n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertEqual(response.data['error'], 'Interview time is required.')\n